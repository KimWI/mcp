{"name":"MSX CAS Packager","tagline":"A command line interface (CLI) tool to pack/unpack MSX CAS files","body":"[![Build Status](https://travis-ci.org/apoloval/mcp.svg?branch=master)](https://travis-ci.org/apoloval/mcp)\r\n\r\n# MSX CAS Packager\r\n\r\n**M**SX **C**AS **P**ackager is a command line interface (CLI) tool to manage\r\nMSX CAS files. A CAS file is a very common file format used to represent\r\nthe contents of a MSX cassete tape.\r\n\r\nUsing MCP you can perform the following actions on a CAS file.\r\n\r\n* List CAS files. You can obtain a list of files contained in the CAS file.\r\n* Add files to a new or existing CAS file. This is one the most powerful\r\nfeatures of MCP. You can create your own CAS files with your files. Basic\r\nprograms, assembler programs, data, etc, can be stored into a CAS file.\r\n* Extract contents from existing CAS file. Did you ever want to make some\r\nreverse engineering of your favorite MSX games? Now that's possible thanks\r\nto MCP! You can extract the files of a CAS file, read their Basic programs,\r\nstudy its binary code, etc.\r\n* Export CAS files to WAV format. This feature, combined with the ability\r\nto create new CAS files with your own programs, makes possible to convert\r\nthe CAS file into WAV that can be played to your MSX hardware cassette\r\ninterface. Code your own games and play them in your real MSX!\r\n\r\nBy the way, MCP is free and open source. You only have to obey the terms of\r\nthe [Mozilla Public License](https://www.mozilla.org/MPL/), which is basically:\r\n\r\n* Use the software for anything you want, as long as you want, wherever you\r\nwant.\r\n* If you want to modify the software, read the terms carefully.\r\n\r\n## Download binaries\r\n\r\nYou will find installation binaries for the latest version of MCP in the\r\nfollowing links.\r\n\r\n* [MCP for Mac OS X 64-bits](https://bintray.com/artifact/download/apoloval/msx/mcp/v0.1.0/mcp-0.1.0.pkg)\r\n* [MCP for Windows 32-bits](https://bintray.com/artifact/download/apoloval/msx/mcp/v0.1.0/mcp-0.1.0_x86.exe)\r\n* [MCP for Windows 64-bits](https://bintray.com/artifact/download/apoloval/msx/mcp/v0.1.0/mcp-0.1.0_x64.exe)\r\n\r\nIf your operating system is not listed above, please try to build from sources\r\nas described below.\r\n\r\n## Build from sources\r\n\r\nMCP is written in [Rust programming language](http://www.rust-lang.org).\r\nYou will need Rust to be installed in the system to build MCP. The simplest\r\nmethod to do that is to go to the project website and download the latest\r\ndistribution installer for your platform.\r\n\r\nAfter installing Rust, just go to the top directory of your MCP's working\r\ncopy and type:\r\n\r\n```shell\r\n$ cargo build --release\r\n```\r\n\r\nMCP will be build in the `target/release` directory.\r\n\r\n## How it works\r\n\r\nMCP is a command line utility (CLI), and therefore must be used from a console.\r\nIf you don't know how to use a console have a look to the thousand of tutorials\r\navailable on the Internet and come back later.\r\n\r\nIts a good idea to place `mcp` executable (`mcp.exe` in Windows platform)\r\nsomewhere in your hard drive and include that directory in your `PATH`\r\nenvironment variable. If you do so you will be able to execute `mcp` easily.\r\n\r\nBefore anything else, please execute `mcp --help` to familiarize yourself with\r\nthe command options.\r\n\r\n```shell\r\n$ mcp --help\r\nUsage: mcp -l <cas-file>\r\n       mcp -a <cas-file> <file>...\r\n       mcp -x <cas-file>\r\n       mcp -e <cas-file> <wav-file>\r\n       mcp --help\r\n       mcp --version\r\n\r\nOptions:\r\n    -h, --help                  Print this message\r\n    -v, --version               Print the mcp version\r\n    -l, --list                  Lists the contents of the given CAS file\r\n    -a, --add                   Add new files to a given CAS file. If the CAS\r\n                                file does not exist, it is created.\r\n    -x, --extract               Extracts the contents from the given CAS file\r\n    -e, --export                Exports the CAS file into a WAV file\r\n```\r\n\r\nLet's have a look to each of the commands to see how they work.\r\n\r\n### List package contents\r\n\r\nWith `mcp -l arkanoid.cas` (or longer version `mcp --list arkanoid.cas`), we\r\ncan see the contents of the `arkanoid.cas` file.\r\n\r\n```shell\r\n$ mcp -l arkanoid.cas\r\nascii  | ark    |   256 bytes |\r\nbin    | ARK    |    96 bytes | [0xc000,0xc057]:0xc000\r\ncustom |        | 32768 bytes |\r\n```\r\n\r\nAs you can see, the contents of the file are shown. In this example we have\r\nthree files in the CAS tape. The first column indicates the file type, which\r\ncan be one of the following:\r\n\r\n* `binary`: a binary file, probably containing a mix of binary code and data.\r\nIt is typically loaded with `BLOAD` command from the Basic interpreter.\r\n* `ascii`: an ASCII file, probably containing a non-tokenized Basic program.\r\nIt is typically loaded with `LOAD` command from the Basic interpreter.\r\n* `basic`: a Basic file, containing a tokenized Basic program. It is typically\r\nloaded with `CLOAD` command from the Basic interpreter.\r\n* `custom`: custom data, aimed to be loaded by some program in a custom way.\r\n\r\nThe second column shows the name of the file. The third column shows the length\r\nof the file in bytes. The forth column is only shown for binary files, and it\r\ncontains the memory addresses where the binary data will be placed: start\r\naddress, end address and begin address.\r\n\r\n### Add contents to package\r\n\r\nWith `mcp -a myprogram.cas myprog.bin`, you can create a new CAS file\r\n`myprogram.cas` that contains the file `myprog.bin`.\r\n\r\n```shell\r\n$ mcp -a myprogram.cas myprog.bin\r\nAdding myprog.bin... Done\r\n```\r\n\r\nYou can check the contents of the new CAS file with `mcp -l`.\r\n\r\n```shell\r\n$ mcp -l myprogram.cas\r\nbin    | myprog |   100 bytes | [0x8000,0x803e]:0x8000\r\n```\r\n\r\nThe bin filename is intentionally shorten than the CAS file. Tape filenames\r\nare limited to six bytes. If your bin file would be `myprogram.bin` its name\r\nwould be truncated.\r\n\r\n```shell\r\n$ mcp -a myprogram.cas myprogram.bin\r\nAdding myprogram.bin... Warning: filename myprogram.bin is too long, truncating\r\nDone\r\n\r\n$ mcp -l myprogram.cas\r\nbin    | myprog |   100 bytes | [0x8000,0x803e]:0x8000\r\n```\r\n\r\nMCP is able to determine the file type by the file extension with the following\r\ncriteria:\r\n\r\n* `file.bin` is interpreted and stored as binary file. The binary file ID byte\r\n(`0xfe`) is automatically removed when dumped into the CAS file. Please remember\r\nthat binary files in cassette do not include it.\r\n* `file.asc` is interpreted and stored as ASCII file. Its contents are automatically\r\npadded by MCP with EOF (end-of-file) bytes to have 256-byte aligned blocks required\r\nby MSX systems to load the file successfully.\r\n* `file.bas` is interpreted and stored as Basic file\r\n* Any other file extension is interpreted as and stored as a custom file\r\n\r\nIt is possible to add new files to an existing CAS file.\r\n\r\n```shell\r\n$ mcp -l myprogram.cas\r\nbin    | myprog |   100 bytes | [0x8000,0x803e]:0x8000\r\n\r\n$ mcp -a myprogram.cas foobar.dat\r\nAdding foobar.dat... Done\r\n\r\n$ mcp -l myprogram.cas\r\nbin    | myprog |   100 bytes | [0x8000,0x803e]:0x8000\r\ncustom |        |  6920 bytes |\r\n```\r\n\r\nNevertheless, you don't have to add files one by one. You can specify several\r\nfiles and all them will be added to the CAS file.\r\n\r\n```shell\r\n$ mcp -l myprogram.cas\r\nbin    | myprog |   100 bytes | [0x8000,0x803e]:0x8000\r\ncustom |        |  6920 bytes |\r\n\r\n$ mcp -a myprogram.cas foobar2.dat foobar3.dat\r\nAdding foobar2.dat... Done\r\nAdding foobar3.dat... Done\r\n\r\n$ mcp -l myprogram.cas\r\nbin    | myprog |   100 bytes | [0x8000,0x803e]:0x8000\r\ncustom |        |  6920 bytes |\r\ncustom |        | 29648 bytes |\r\ncustom |        | 49272 bytes |\r\n```\r\n\r\n### Extract package contents\r\n\r\nUsing `mcp -x arkanoid.cas`, you can extract the contents of `arkanoid.cas`\r\ninto the working directory.\r\n\r\n```shell\r\n$ mcp -x arkanoid.cas\r\nExtracting ark.asc... Done\r\nExtracting ARK.bin... Done\r\nExtracting custom.001... Done\r\n\r\n$ ls\r\nARK.bin\t\tark.asc\t\tarkanoid.cas\tcustom.001\r\n```\r\n\r\nThe files are extracted using the following criteria:\r\n\r\n* Binary files are extracted with the original name plus `.bin` extension.\r\n* ASCII files are extracted with the original name plus `.asc` extension.\r\n* Basic files are extracted with the original name plus `.bas` extension.\r\n* Custom files are extracted as `custom.XXX`, where `XXX` is a sequence number\r\nindicating the relative position of the custom file in the tape.\r\n\r\nIn case of ASCII files, the trailing EOF bytes are not copied to the target\r\nfile so you can read the Basic source code as text.\r\n\r\nIn case of binary files, the leading ID byte (`0xfe`) is automatically\r\nprepended to the target file.\r\n\r\n```shell\r\n$ file ark.asc\r\nark.asc: ASCII text, with CRLF line terminators\r\n\r\n$ cat ark.asc\r\n10 BLOAD\"cas:\",R\r\n```\r\n\r\n### Export package to WAV format\r\n\r\nUsing `mcp -e myprogram.cas myprogram.wav` you can export the contents of the\r\ntape into a WAV file. The WAV file can be reproduced with your sound card to\r\nload the data into a real MSX hardware using the cassette interface.\r\n\r\n```shell\r\n$ mcp -e myprogram.cas myprogram.wav\r\nEncoding block 0... 371 KiB\r\nEncoding block 1... 151 KiB\r\nEncoding block 2... 2788 KiB\r\nEncoding block 3... 11577 KiB\r\nEncoding block 4... 19166 KiB\r\n\r\n$ file myprogram.wav\r\nmyprogram.wav: RIFF (little-endian) data, WAVE audio, Microsoft PCM, 8 bit, mono 43200 Hz\r\n```\r\n\r\nThe resulting file is ready to be played and make your homebrew programs\r\nloadable in your MSX computer.\r\n\r\n## Acknowledgements\r\n\r\nMCP was coded by porting several code fragments from\r\n[CAS Tools](http://home.kabelfoon.nl/~vincentd/). Many thanks to Vincent van\r\nDam for his software.\r\n\r\nMCP export feature has been tested with several games in\r\n[OpenMSX](http://openmsx.sourceforge.net) emulator. Many thanks to its authors\r\nand congratulations for making such a great software.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}